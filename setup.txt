COMENZI NPM
  npm init
  npm install sequelize sqlite3
  npm install express graphql graphql-http bcrypt jest jsonwebtoken
  
  npm install --save-dev sequelize-cli
  
  npx sequelize-cli init

ALTELE
 - Modificat config.json -> js, inlocuit cu cod de la boilerplate
 - Adaugat "type": "module" la package.json

 - Codul pentru models/index.js trebuie luat de la boilerplate

COMENZI TABELE (eventual --force pentru suprascriere)
  npx sequelize-cli model:generate --name User --attributes name:string,password:string
  npx sequelize-cli model:generate --name Account --attributes IBAN:string,cardNo:string,balance:number,userId:integer
  npx sequelize-cli model:generate --name Budget --attributes name:string,balance:number,accountId:integer
  npx sequelize-cli model:generate --name Transaction --attributes description:string,date:string,amount:number,recipient:string,accountId:integer,budgetId:integer
  
  In folderul models, dupa ce se genereaza modelele trebuie modificat:
  - 'require' => 'import {Model} from 'sequelize'
  - 'models.exports' => 'export default';
  
  Fisierele migratiilor trebuie redenumite de la .js to .cjs inainte de db:migrate !!
  
  In fisierele de migratii trebuie completate relatiile prin referintele cheilor
  In fisierele modelelor trebuie definite asociatiile hasMany, belongsTo
  
  APOI DB:MIGRATE

DACA MIGRATIILE AU FOST FACUTE PE ALT DEVICE 
  npm install 
  npx sequelize-cli db:migrate

ALTAIR
  Requesturile se trimit la http://localhost:{port}/graphql
  ! port aici este 3005 


EXEMPLE DE MUTATII - TOATE SE TRIMIT CU POST
mutation CreateUser {
  createUser(user: { 
    name: "Maria", 
    password: "mariapop123" 
  }) {
    id
    name
  }
}

mutation Login {
  login( credentials: {
    username: "Maria",
    password: "mariapop123"
  }){
    token
  }
}
!!! DUPA LOGIN, TREBUIE SETAT HEADER:
 key: 'Authorization'
 value: 'Bearer <token_value>'
  !!!! ATENTIE: ATUNCI CAND SE DA PASTE LA TOKEN IN 'SET HEADERS',
    EL ADAUGA UN 'BEARER' LA SFARSIT DE TOT, TREBUIE SCOS

mutation UpdateUser {
  updateUser(id: 1, user: {name: "MariaPop", password:  "mariapop123"})
  {
    id
    name
  }
}

mutation DeleteUser {
  deleteUser(id: 1) 
}


-----PENTRU BOILERPLATE

mutation CreateUser {
  createUser(user: { 
    name: "Maria", 
    password: "mariapop123" 
  }) {
    id
    name
  }
}

mutation Login {
  login( credentials: {
    username: "Maria",
    password: "mariapop123"
  }){
    token
  }
}

After login, click on 'Set headers' and do
 key: 'Authorization'
 value: 'Bearer <token_value>'

mutation CreatePost {
  createPost( post: {
    title: "Trei!",
    body: "a treia postare"
  }) {
    id
    title
    body
    author {
      id
      name
    }
  }
}
